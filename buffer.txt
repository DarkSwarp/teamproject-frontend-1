// src/App.js
import { lazy } from 'react';
import { Route, Routes, Navigate } from 'react-router-dom';
import Layout from 'components/MainLayout/MainLayout/MainLayout';
import { PrivateRoute } from 'components/PrivateRoute';
import { RestrictedRoute } from 'components/RestrictedRoute';
import { useDispatch } from 'react-redux';
import { useSelector } from 'react-redux';
import { selectIsRefreshing } from 'redux/auth/selectors';
import { useEffect } from 'react';
import { refreshUser } from 'redux/auth/operations';

import LoginPage from 'pages/LoginPage';
import MainPage from 'pages/MainPage';
import RegisterPage from 'pages/RegisterPage';
import NotFoundPage from 'pages/NotFoundPage';
import { ChoosedDay, ChoosedMonth } from 'components/CalendarPage';
const AccountPage = lazy(() => import('pages/AccountPage'));
const CalendarPage = lazy(() => import('pages/CalendarPage'));
const StatisticsPage = lazy(() => import('pages/StatisticsPage'));

export const App = () => {
  const dispatch = useDispatch();
  const isRefreshing = useSelector(selectIsRefreshing);

  useEffect(() => {
    dispatch(refreshUser());
  }, [dispatch]);

  return (
    !isRefreshing && (
      <Routes>
        <Route
          path="/"
          element={
            <RestrictedRoute redirectTo="/calendar" component={<MainPage />} />
          }
          index
        />

        <Route
          path="/login"
          element={
            <RestrictedRoute redirectTo="/calendar" component={<LoginPage />} />
          }
        />

        <Route
          path="/register"
          element={
            <RestrictedRoute
              redirectTo="/calendar"
              component={<RegisterPage />}
            />
          }
        />

        <Route
          path="/"
          element={<PrivateRoute redirectTo="/login" component={<Layout />} />}
        >
          <Route path="calendar" element={<CalendarPage />}>
            <Route
              index
              element={<Navigate to="/calendar/month/:currentDate" />}
            />
            <Route path="month/:currentDate" element={<ChoosedMonth />} />
            <Route path="day" element={<ChoosedDay />} />
          </Route>
          <Route path="account" element={<AccountPage />} />
          <Route path="statistics" element={<StatisticsPage />} />
        </Route>

        <Route path="*" element={<NotFoundPage />} />
      </Routes>
    )
  );
};
// src/components/CalendarPage/index.js
export { default as CalendarToolbar } from './CalendarToolbar/CalendarToolbar/CalendarToolbar';
export { default as PeriodPaginator } from './CalendarToolbar/PeriodPaginator/PeriodPaginator';
export { default as PeriodTypeSelect } from './CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect';
export { default as AddTaskBtn } from './ChoosedDay/AddTaskBtn/AddTaskBtn';
export { default as ChoosedDay } from './ChoosedDay/ChoosedDay/ChoosedDay';
export { default as ColumnHeadBar } from './ChoosedDay/ColumnHeadBar/ColumnHeadBar';
export { default as ColumnsTasksList } from './ChoosedDay/ColumnsTasksList/ColumnsTasksList';
export { default as TaskColumnCard } from './ChoosedDay/TaskColumnCard/TaskColumnCard';
export { default as TaskToolbar } from './ChoosedDay/TaskToolbar/TaskToolbar';
export { default as TasksColumn } from './ChoosedDay/TasksColumn/TasksColumn';
export { default as CalendarTable } from './ChoosedMonth/CalendarTable/CalendarTable';
export { default as ChoosedMonth } from './ChoosedMonth/ChoosedMonth/ChoosedMonth';
export { default as WeekdayHeader } from './ChoosedMonth/ChoosedMonth/MonthCalendarHead/MonthCalendarHead';
// src/components/CalendarPage/ChoosedMonth/CalendarTable/CalendarTable.js
import React from 'react';
import moment from 'moment';

import {
  GridWrapper,
  CellWrapper,
  RowInCell,
  DayWrapper,
} from './CalendarTable.styled';

const CalendarTable = ({ startDay }) => {
  const currentDate = moment();
  const firstDayOfCurrentMonth = currentDate.clone().startOf('month');
  const lastDayOfCurrentMonth = currentDate.clone().endOf('month');

  const daysArray = [];
  let currentDay = startDay.clone();

  if (currentDay.day() === 0) {
    currentDay.add(1, 'day');
  }

  let isCurrentMonth = false;

  for (let i = 0; i < 35; i++) {
    if (currentDay.isSame(firstDayOfCurrentMonth, 'day')) {
      isCurrentMonth = true;
    }

    if (
      !isCurrentMonth ||
      currentDay.isSameOrBefore(lastDayOfCurrentMonth, 'day')
    ) {
      daysArray.push({
        day: isCurrentMonth ? currentDay.clone() : null,
        isCurrentMonth: isCurrentMonth,
      });
    }

    if (isCurrentMonth && currentDay.isSame(lastDayOfCurrentMonth, 'day')) {
      break;
    }

    currentDay.add(1, 'day');
  }

  while (daysArray.length < 35) {
    daysArray.push({
      day: null,
      isCurrentMonth: false,
    });
  }

  return (
    <div>
      <GridWrapper>
        {daysArray.map(({ day, isCurrentMonth }, i) => (
          <CellWrapper key={day ? day.format('DDMMYYYY') : `empty-${i}`}>
            <RowInCell>
              <DayWrapper
                className={isCurrentMonth ? 'current-month' : ''}
                $today={day && day.isSame(currentDate, 'day')}
              >
                {day ? day.format('D') : ''}
              </DayWrapper>
            </RowInCell>
          </CellWrapper>
        ))}
      </GridWrapper>
    </div>
  );
};

export default CalendarTable;
// src/components/CalendarPage/ChoosedMonth/ChoosedMonth/ChoosedMonth.js
import React from 'react';
import MonthCalendarHead from './MonthCalendarHead/MonthCalendarHead';
import CalendarTable from '../CalendarTable/CalendarTable';
import moment from 'moment';

const ChoosedMonth = () => {
  const startDay = moment().startOf('month').startOf('week');
  return (
    <>
      <MonthCalendarHead />
      <CalendarTable startDay={startDay} />
    </>
  );
};

export default ChoosedMonth;
// src/components/CalendarPage/ChoosedMonth/ChoosedMonth/MonthCalendarHead/MonthCalendarHead.js
import React from 'react';
import { LargeWeekday, WeekWrapper } from './MonthCalendarHead.styled';
import { useMediaQuery } from 'react-responsive';

const MonthCalendarHead = () => {
  const isTabletOrDesktop = useMediaQuery({ minWidth: 376 });

  return (
    <WeekWrapper>
      <LargeWeekday $weekend={false}>
        {isTabletOrDesktop ? 'mon' : 'm'}
      </LargeWeekday>
      <LargeWeekday $weekend={false}>
        {isTabletOrDesktop ? 'tue' : 't'}
      </LargeWeekday>
      <LargeWeekday $weekend={false}>
        {isTabletOrDesktop ? 'wed' : 'w'}
      </LargeWeekday>
      <LargeWeekday $weekend={false}>
        {isTabletOrDesktop ? 'thu' : 't'}
      </LargeWeekday>
      <LargeWeekday $weekend={false}>
        {isTabletOrDesktop ? 'fri' : 'f'}
      </LargeWeekday>
      <LargeWeekday $weekend={true}>
        {isTabletOrDesktop ? 'sat' : 's'}
      </LargeWeekday>
      <LargeWeekday $weekend={true}>
        {isTabletOrDesktop ? 'sun' : 's'}
      </LargeWeekday>
    </WeekWrapper>
  );
};

export default MonthCalendarHead;
// src/components/CalendarPage/ChoosedDay/ChoosedDay/ChoosedDay.js
import DayCalendarHead from '../DayCalendarHead/DayCalendarHead';
import TasksColumnsList from '../TasksColumnsList/TasksColumnsList';

const ChoosedDay = () => {
  return (
    <>
      <DayCalendarHead />
      <TasksColumnsList />
    </>
  );
};
export default ChoosedDay;
// src/components/CalendarPage/CalendarToolbar/CalendarToolbar/CalendarToolbar.js
import { useState } from 'react';
import { Routes, Route, useLocation } from 'react-router-dom';
// import { useSelector } from 'react-redux';
import { PeriodPaginator, PeriodTypeSelect } from '../../index';
import { Container, ContainerSecond } from './CalendarToolbar.styled';
// import { parse, startOfMonth, endOfMonth, format } from 'date-fns'; // Додайте імпорт
import 'react-datepicker/dist/react-datepicker.css';

// import { fetchTasks } from '../../../../redux/tasks/operations';

const CalendarToolbar = () => {
  // const dateGlobal = useSelector(state => state.date.currentDate);
  const [date, setDate] = useState(new Date());
  const [isOpen, setIsOpen] = useState(false);
  const location = useLocation();

  // console.log(sc); // Виводить щось на зразок "16-08-2023"

  // const dispatch = useDispatch();

  //   return {
  //     monthStart: formattedFirstDay,
  //     monthEnd: formattedLastDay,
  //   };
  // };
  // const forFetchData = () => {
  //   const parsedDate = new Date(date); // Парсинг даты в стандартном формате
  //   const startDate = startOfMonth(parsedDate);
  //   const endDate = endOfMonth(parsedDate);

  //   const formattedStartDate = format(startDate, 'yyyy-MM-dd');
  //   const formattedEndDate = format(endDate, 'yyyy-MM-dd');

  //   console.log('Start of the month:', formattedStartDate);
  //   console.log('End of the month:', formattedEndDate);
  // };

  // forFetchData()

  // useEffect(() => {
  //   dispatch(fetchTasks());
  //   //  // formatDateForFetch(date); а потом записать их в selectTasks??
  // }, [date, dateGlobal]);

  const changeDate = e => {
    const newDate = new Date(date);

    if (location.pathname === '/calendar/day') {
      if (e.currentTarget.className.includes('decrease')) {
        console.log('yes');
        newDate.setDate(newDate.getDate() - 1);
      } else {
        newDate.setDate(newDate.getDate() + 1);
      }

      setDate(newDate);
    } else {
      if (e.currentTarget.className.includes('decrease')) {
        newDate.setMonth(newDate.getMonth() - 1);
      } else {
        newDate.setMonth(newDate.getMonth() + 1);
      }

      setDate(newDate);
    }
  };

  // const formatDateString = inputDate => {
  //   if (location.pathname === '/calendar/day') {
  //     const parsedDate = new Date(inputDate);
  //     const options = { day: 'numeric', month: 'short', year: 'numeric' };
  //     const formattedDate = parsedDate.toLocaleDateString('en-GB', options);
  //     return formattedDate.replace(
  //       parsedDate.toLocaleString('en-GB', { month: 'short' }),
  //       parsedDate.toLocaleString('en-GB', { month: 'short' }).toUpperCase()
  //     );
  //   }
  //   const parsedDate = new Date(inputDate);
  //   const options = { month: 'short', year: 'numeric' };
  //   const formattedDate = parsedDate.toLocaleDateString('en-GB', options);
  //   const monthUpperCase = formattedDate.split(' ')[0].toUpperCase();
  //   const year = formattedDate.split(' ')[1];
  //   return `${monthUpperCase} ${year}`;
  // };

  // const formattedDate = formatDateString(date);

  return (
    <>
      <Container>
        <ContainerSecond>
          <PeriodPaginator
            date={date}
            getTasks={changeDate}
            isOpen={isOpen}
            setIsOpen={setIsOpen}
            setDate={setDate}
          />
        </ContainerSecond>
        <div>
          <PeriodTypeSelect />
        </div>
      </Container>
      {/* <Routes>
        <Route path="/month" element={<div>day</div>} />
        <Route path="/day" element={<div>month</div>} />
      </Routes> */}
    </>
  );
};
export default CalendarToolbar;
// src/components/CalendarPage/CalendarToolbar/PeriodPaginator/PeriodPaginator.js
import {
  ButtonIncrease,
  ButtonDecrease,
  Icon,
  DatePickerWrapperStyles,
  Date,
  ForDatePicker,
  Container,
} from './PeriodPaginator.styled';
import DatePicker from 'react-datepicker';
import icon from 'assets/icons/symbol-defs.svg';
import { useLocation } from 'react-router-dom';
import { format } from 'date-fns'; // Додайте імпорт
import 'react-datepicker/dist/react-datepicker.css';

const PeriodPaginator = ({ date, getTasks, isOpen, setIsOpen, setDate }) => {
  const location = useLocation();
  // console.log(window);

  const handleChange = e => {
    setIsOpen(!isOpen);
    setDate(e);
  };
  const handleClick = e => {
    e.preventDefault();
    setIsOpen(!isOpen);
  };

  return (
    <>
      <ForDatePicker>
        {' '}
        <Date className="example-custom-input" onClick={handleClick}>
          {location.pathname === '/calendar/day'
            ? format(date, 'dd MMM yyyy')
            : format(date, 'MMMM yyyy')}
        </Date>
        {isOpen && (
          <DatePicker selected={date} onChange={handleChange} inline />
        )}
      </ForDatePicker>

      <Container>
        {' '}
        <ButtonDecrease className="decrease" onClick={getTasks}>
          <Icon width="18" height="18">
            <use href={icon + '#icon-chevron-left'}></use>
          </Icon>
        </ButtonDecrease>
        <ButtonIncrease className="increase" onClick={getTasks}>
          <svg width="18" height="18">
            <use href={icon + '#icon-chevron-right'}></use>
          </svg>
        </ButtonIncrease>
      </Container>

      <DatePickerWrapperStyles />
    </>
  );
};
export default PeriodPaginator;
// src/components/CalendarPage/CalendarToolbar/PeriodTypeSelect/PeriodTypeSelect.js
import { useNavigate } from 'react-router-dom';
import { ButtonMonth, ButtonDay, Container } from './PeriodTypeSelect.styled';
import { useLocation } from 'react-router-dom';
import moment from 'moment';

const PeriodTypeSelect = () => {
  const navigate = useNavigate();
  const location = useLocation();

  const toMonth = () => {
    // какой маршрут в итоге будет??????
    // navigate('/calendar/month/:currentDate');
    const currentDate = moment().format('YYYY-MM-DD');
    navigate(`/calendar/month/${currentDate}`);
  };
  const toDay = () => {
    // какой маршрут в итоге будет??????
    // navigate('/calendar/day');
    const currentDate = moment().format('YYYY-MM-DD');
    navigate(`/calendar/day/${currentDate}`);
  };
  return (
    <Container>
      <ButtonMonth
        $isActive={location.pathname.includes('day')}
        onClick={toMonth}
      >
        Month
      </ButtonMonth>
      <ButtonDay
        $isActive={location.pathname.includes('month')}
        onClick={toDay}
      >
        Day
      </ButtonDay>
    </Container>
  );
};
export default PeriodTypeSelect;
// src/pages/CalendarPage.js
// import { useEffect } from 'react';
// import { useDispatch } from 'react-redux';
// import { fetchTasks } from 'redux/tasks/operations';
// import { ChoosedDay } from 'components/CalendarPage';
import { Section } from 'components/Common';
import { CalendarToolbar } from '../components/CalendarPage/index';
// import React from 'react';
// import moment from 'moment';
import { Outlet } from 'react-router-dom';

const CalendarPage = () => {
  // const dispatch = useDispatch();

  // useEffect(() => {
  //   dispatch(fetchTasks({
  //     monthStart: "2023-08-01",
  //     monthEnd: "2023-08-31"
  //   }));
  // }, [dispatch]);

  return (
    <>
      <CalendarToolbar />
      {/* <Section>
        <ChoosedMonth startDay={startDay} />
      </Section>
      <Section>
        <ChoosedDay />
      </Section> */}
      <Section>
        <Outlet />
      </Section>
    </>
  );
};
// const startDay = moment().startOf('month').startOf('week');

export default CalendarPage;
